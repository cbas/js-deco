{"version":3,"sources":["decorators.js"],"names":[],"mappings":";;;;;AACO,IAAI,UAAU,GAAG;AAQtB,WAAS,EAAA,mBAAC,IAAI,EAAC;AACb,WAAO,YAAW;AAChB,aAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;;AAEpC,aAAO,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,UAAG,SAAS,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;AAG3D,UAAG,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,EAAC;AACjH,eAAO,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,EAAC,SAAS,CAAC,CAAC,CAAC,EAAC,SAAS,CAAC,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;OAChF,MAAI;AACH,eAAO,UAAU,CAAC,sBAAsB,CAAC,IAAI,EAAC,SAAS,CAAC,CAAC;OAC1D;KACF,CAAA;GACF;;AAED,wBAAsB,EAAA,gCAAC,IAAI,EAAC,IAAI,EAAC;AAC/B,WAAO,CAAC,GAAG,CAAC,wBAAwB,EAAC,SAAS,CAAC,CAAC;AAChD,WAAO,UAAS,MAAM,EAAC,GAAG,EAAC,UAAU,EAAE;AACrC,aAAO,UAAU,CAAC,eAAe,CAAC,MAAM,EAAC,GAAG,EAAC,UAAU,EAAC,SAAS,EAAC,IAAI,CAAC,CAAC;KACzE,CAAA;GACF;;AAED,iBAAe,EAAA,yBAAC,MAAM,EAAC,GAAG,EAAC,UAAU,EAAC,IAAI,EAAC;AACzC,WAAO,CAAC,GAAG,CAAC,iBAAiB,EAAC,SAAS,CAAC,CAAC;AACzC,WAAO,UAAU,CAAC,eAAe,CAAC,MAAM,EAAC,GAAG,EAAC,UAAU,EAAC,EAAE,EAAC,IAAI,CAAC,CAAC;GAClE;;AAED,iBAAe,EAAA,yBAAC,MAAM,EAAC,GAAG,EAAC,UAAU,EAAC,IAAI,EAAC,IAAI,EAAC;AAC9C,WAAO,CAAC,GAAG,CAAC,iBAAiB,EAAC,SAAS,CAAC,CAAC;AACzC,cAAU,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AACrD,WAAO,UAAU,CAAC;GACnB;;CAEF,CAAC;QA1CS,UAAU,GAAV,UAAU","file":"decorators.js","sourceRoot":"/source/","sourcesContent":["\nexport var Decorators = {\n\n  /**\n   * Attempt to detect if the decorator was used with or without parentesis\n   *\n   * @param fn\n   * @returns {*}\n   */\n  decorator(prop){\n    return function() {\n      console.log('decorator', arguments);\n\n      console.log('arguments[0]', arguments[0]);\n      if(arguments[0]) console.log('arguments[0]', arguments[0]);\n\n      //test for simple method decorators\n      if(arguments.length > 2 && arguments[0].prototype && typeof arguments[1] === \"string\" && arguments[2].configurable){\n        return Decorators.simpleDecorator(arguments[0],arguments[1],arguments[2],prop);\n      }else{\n        return Decorators.parameterizedDecorator(prop,arguments);\n      }\n    }\n  },\n\n  parameterizedDecorator(prop,args){\n    console.log('parameterizedDecorator',arguments);\n    return function(target,key,descriptor) {\n      return Decorators.nativeDecorator(target,key,descriptor,arguments,prop);\n    }\n  },\n\n  simpleDecorator(target,key,descriptor,prop){\n    console.log('simpleDecorator',arguments);\n    return Decorators.nativeDecorator(target,key,descriptor,{},prop);\n  },\n\n  nativeDecorator(target,key,descriptor,args,prop){\n    console.log('nativeDecorator',arguments);\n    descriptor.value = prop(descriptor.value, args, key);\n    return descriptor;\n  }\n\n};\n"]}