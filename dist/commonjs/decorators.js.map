{"version":3,"sources":["decorators.js"],"names":[],"mappings":"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","file":"decorators.js","sourceRoot":"/source/","sourcesContent":["/**\n * Utility functions to create decorators\n */\nexport var Decorators = {\n\n  /**\n   * Create a decorator from a function.\n   * This attempt to create a parameterized or a simple decorator\n   * depending on how the decorator is used\n   *\n   * @param prop          the property or object to decorate\n   *\n   * @returns {Function} a decorator function that returns a property descriptor or target\n   */\n  decorator(prop){\n    return function(...args) {\n      //detect simple method decorators which will have a target, key, descriptor signature\n      if(args.length > 2 && isClass(args[0]) && typeof args[1] === \"string\" && args[2].configurable){\n        return Decorators.simpleDecorator(args[0],args[1],args[2],{},prop);\n      }else // detect simple class decorator\n      if(args.length > 0 && typeof args[0] === \"function\" && isClass(args[0])){\n        return prop(args[0]);\n      }else{\n        return Decorators.parameterizedDecorator(prop,args);\n      }\n    }\n  },\n\n  /**\n   * Create a parameterized decorator from a method\n   *\n   * @param prop        function to decorate\n   * @param args        arguments from the decorator\n   *\n   * @returns {Function} a decorator function that returns a property descriptor or target\n   */\n  parameterizedDecorator(prop,args){\n    return function(target,key,descriptor) {\n      if(!target) {\n        //console.log('parameterized class decorator',args,prop);\n        return prop;\n      }\n      return Decorators.simpleDecorator(target,key,descriptor,args,prop);\n    }\n  },\n\n  /**\n   *\n   * @param target          the target object (class)\n   * @param key             name of the property to be decorated\n   * @param descriptor      class member descriptor\n   * @param args            arguments from the decorator\n   * @param fn              function that will be used as a decorator\n   *\n   * @returns {Object}    a property descriptor or target\n   */\n  simpleDecorator(target,key,descriptor,args,fn){\n    return fn(target,key,descriptor,args);\n  },\n\n  /**\n   * Create a decorator from a mutator function.\n   * This attempt to create a parameterized or a simple decorator\n   * depending on how the decorator is used.\n   *\n   * @param prop          the property or object to decorate\n   *\n   * @returns {Object}    a property descriptor\n   */\n  mutator(prop){\n    return function(...args) {\n      //test for simple method decorators which will have a target, key, descriptor signature\n      if(args.length > 2 && isClass(args[0]) && typeof args[1] === \"string\" && args[2].configurable){\n        return Decorators.simpleMutator(args[0],args[1],args[2],{},prop);\n      }else{\n        return Decorators.parameterizedMutator(prop,args);\n      }\n    }\n  },\n\n  /**\n   * Create a parameterized decorator from a mutator function\n   *\n   * @param prop        function to decorate\n   * @param args        arguments from the decorator\n   *\n   * @returns {Function}  a decorator function that returns a property descriptor\n   */\n  parameterizedMutator(prop,args){\n    return function(target,key,descriptor) {\n      return Decorators.simpleMutator(target,key,descriptor,args,prop);\n    }\n  },\n\n  /**\n   * Create a method decorator from a mutator function\n   *\n   * @param target          the target object (class)\n   * @param key             name of the property to be decorated\n   * @param descriptor      class member descriptor\n   * @param args            arguments from the decorator\n   * @param fn              mutator function to create a decorator from\n   *\n   * @returns {Object}      the modified property descriptor\n   */\n  simpleMutator(target,key,descriptor,args,fn){\n    descriptor.value = fn(descriptor.value,args,key);\n    return descriptor;\n  }\n\n};\n\n/**\n * Test is an object is empty (has no properties or methods).\n *\n * @param obj       Object to inspect\n *\n * @returns {boolean}   true if object is empty\n */\nfunction isEmptyObject( obj ) {\n  return Object.getOwnPropertyNames(obj).length === 0;\n}\n\n/**\n * Extract classname from a function that represents an ES6 class\n *\n * @param obj           Object or function to analyze\n * @returns {String}    name of the class or null if not found\n */\nfunction isClass(obj){\n  //if(typeof obj===\"function\") obj = new obj();\n  var text = Function.prototype.toString.call(obj.constructor);\n  return (text.match(/_classCallCheck\\(this,\\w?(.*)\\)/)!==null);\n}\n"]}